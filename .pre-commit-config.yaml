# A framework for managing and maintaining multi-language pre-commit hooks
repos:
  - repo: local
    hooks:
      - id: autoflake-remove-unused-variables
        name: autoflake-remove-unused-variables
        types: [python]
        require_serial: true
        language: script
        entry: .venv/bin/python -m autoflake -r --in-place --remove-unused-variables

  - repo: local
    hooks:
      - id: autoflake-remove-all-unused-imports
        name: autoflake-remove-all-unused-imports
        types: [python]
        require_serial: true
        language: script
        entry: .venv/bin/python -m autoflake -r --in-place --remove-all-unused-imports --exclude=__init__.py

  - repo: local
    hooks:
      - id: bandit
        name: bandit
        types: [python]
        require_serial: true
        language: script
        entry: .venv/bin/python -m bandit -r
        exclude: tests

  - repo: local
    hooks:
      - id: black
        name: black
        types: [python]
        require_serial: true
        language: script
        entry: .venv/bin/python -m black

  - repo: local
    hooks:
      - id: flake8
        name: flake8
        types: [python]
        require_serial: true
        language: script
        entry: .venv/bin/python -m flake8

  - repo: local
    hooks:
      - id: isort
        name: isort
        types: [python]
        require_serial: true
        language: script
        entry: .venv/bin/python -m isort

  - repo: local
    hooks:
      - id: mypy
        name: mypy
        types: [python]
        require_serial: true
        language: script
        entry: .venv/bin/python -m mypy
        exclude: tests

  - repo: https://github.com/pre-commit/pre-commit-hooks # Some out-of-the-box hooks for pre-commit
    rev: "v4.3.0"
    hooks:
      # - id: check-added-large-files # Prevent giant files from being committed
      # - id: check-ast # Simply check whether the files parse as valid python
      # # - id: check-byte-order-marker # forbid files which have a UTF-8 byte-order marker
      # - id: check-builtin-literals # Require literal syntax when initializing empty or zero Python builtin types
      # - id: check-case-conflict # Check for files that would conflict in case-insensitive filesystems
      # - id: check-docstring-first # Checks a common error of defining a docstring after code
      # - id: check-executables-have-shebangs # Ensures that (non-binary) executables have a shebang
      # - id: check-json # This hook checks json files for parseable syntax
      # - id: check-shebang-scripts-are-executable # Ensures that (non-binary) files with a shebang are executable
      # - id: pretty-format-json # This hook sets a standard for formatting JSON files
      # - id: check-merge-conflict # Check for files that contain merge conflict strings
      # - id: check-symlinks # Checks for symlinks which do not point to anything
      # - id: check-toml # This hook checks toml files for parseable syntax
      # - id: check-vcs-permalinks # Ensures that links to vcs websites are permalinks
      # - id: check-xml # This hook checks xml files for parseable syntax
      - id: check-yaml # This hook checks yaml files for parseable syntax
      # - id: debug-statements # Check for debugger imports and py37+ `breakpoint()` calls in python source
      # - id: destroyed-symlinks # Detects symlinks which are changed to regular files with a content of a path which that symlink was pointing to
      # - id: detect-aws-credentials # Detects *your* aws credentials from the aws cli credentials file
      # - id: detect-private-key # Detects the presence of private keys
      # # - id: double-quote-string-fixer # This hook replaces double quoted strings with single quoted strings
      - id: end-of-file-fixer # Ensures that a file is either empty, or ends with one newline
        exclude: requirements*.txt
      # # - id: file-contents-sorter # Sort the lines in specified files (defaults to alphabetical). You must provide list of target files as input in your .pre-commit-config.yaml file
      # - id: fix-byte-order-marker # removes UTF-8 byte order marker
      # # - id: fix-encoding-pragma # Add # -*- coding: utf-8 -*- to the top of python files
      # # - id: forbid-new-submodules # Prevent addition of new git submodules
      # - id: mixed-line-ending # Replaces or checks mixed line ending
      # - id: name-tests-test # This verifies that test files are named correctly
      # - id: no-commit-to-branch # Don't commit to branch
      # # - id: requirements-txt-fixer # Sorts entries in requirements.txt
      # - id: sort-simple-yaml # Sorts simple YAML files which consist only of top-level keys, preserving comments and blocks
      - id: trailing-whitespace # This hook trims trailing whitespace


  # - repo: https://github.com/PyCQA/pydocstyle # A static analysis tool for checking compliance with Python docstring conventions
  #   rev: "6.1.1"
  #   hooks:
  #     - id: pydocstyle

  # - repo: https://github.com/pre-commit/pygrep-hooks # A collection of fast, cheap, regex based pre-commit hooks
  #   rev: "v1.9.0"
  #   hooks:
  #     - id: python-check-blanket-noqa # Enforce that `noqa` annotations always occur with specific codes. Sample annotations: `# noqa: F401`, `# noqa: F401,W203`
  #     - id: python-check-blanket-type-ignore # Enforce that `# type: ignore` annotations always occur with specific codes. Sample annotations: `# type: ignore[attr-defined]`, `# type: ignore[attr-defined, name-defined]`
  #     - id: python-check-mock-methods # Prevent common mistakes of `assert mck.not_called()`, `assert mck.called_once_with(...)` and `mck.assert_called`.
  #     - id: python-no-eval # A quick check for the `eval()` built-in function
  #     - id: python-no-log-warn # A quick check for the deprecated `.warn()` method of python loggers
  #     - id: python-use-type-annotations # Enforce that python3.6+ type annotations are used instead of type comments

  # - repo: https://github.com/jendrikseipp/vulture # Find dead Python code
  #   rev: "v2.3"
  #   hooks:
  #     - id: vulture
